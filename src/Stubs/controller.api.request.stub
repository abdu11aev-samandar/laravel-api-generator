<?php

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use App\Services\{{ Service }};
use App\Http\Requests\{{ Request }};
use App\Http\Resources\App\Http\Resources\{{ Model }}\{{ Resource }};
use App\Http\Resources\App\Http\Resources\{{ Model }}\{{ ListResource }};
use App\Http\Controllers\Controller;
use OpenApi\Annotations as OA;


/**
 * @class {{ Model }} Controller
 */
class {{ Class }} extends Controller
{
    /**
     * @property {{ Service }} $service
     */
    private {{ Service }} $service;

    /**
     * Construct
     */
    public function __construct( {{ Service }} $service )
    {
        $this->service = $service;
    }

    /**
     * @OA\Get(path="/api/{{ Route }}",
     *     tags={"{{ Tag }}"},
     *     summary="Returns {{ Model }} list",
     *     description="Returns list. You can get items with filters",
     *     operationId="get{{ Model }}List",
     *     security={ {"bearerAuth": {} }},
     *     @OA\Parameter(
     *          name="search",
     *          description="Filter. Key value for search",
     *          in="query",
     *          required=false,
     *          @OA\Schema(
     *              type="string",
     *              example=""
     *          )
     *      ),
     *     @OA\Parameter(
     *          name="date_column",
     *          description="Filter. Between date column.",
     *          in="query",
     *          required=false,
     *          @OA\Schema(
     *              type="string",
     *              example=""
     *          )
     *      ),
     *     @OA\Parameter(
     *          name="date_from",
     *          description="Filter. Between from date",
     *          in="query",
     *          required=false,
     *          @OA\Schema(
     *              type="datetime",
     *              example=""
     *          )
     *      ),
     *     @OA\Parameter(
     *          name="date_to",
     *          description="Filter. Between to date",
     *          in="query",
     *          required=false,
     *          @OA\Schema(
     *              type="datetime",
     *              example=""
     *          )
     *      ),
     *     @OA\Parameter(
     *          name="order_column",
     *          description="Sort. Column name.",
     *          in="query",
     *          required=false,
     *          @OA\Schema(
     *              type="string",
     *              example="created_at"
     *          )
     *      ),
     *     @OA\Parameter(
     *          name="order_type",
     *          description="Sort. Type.",
     *          in="query",
     *          required=false,
     *          @OA\Schema(
     *              type="string",
     *              example="desc"
     *          )
     *      ),
     *     @OA\Parameter(
     *          name="per_page",
     *          description="Pagination. Per page value.",
     *          in="query",
     *          required=false,
     *          @OA\Schema(
     *              type="integer",
     *              example="15"
     *          )
     *      ),
     *     @OA\Response(
     *         response=200,
     *         description="successful operation",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=401,
     *         description="Unauthorized.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Forbidden.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     * )
     *
     * Display a listing of the resource.
     *
     * @param {{ Request }} $request
     *
     * @return {{ ListResource }}
     */
    public function index( {{ Request }} $request ): {{ ListResource }}
    {
        $list = $this->service->getList($request->validated());

        return new {{ ListResource }}($list);
    }

    /**
     * @OA\Post(path="/api/{{ Route }}",
     *     tags={"{{ Tag }}"},
     *     summary="Store",
     *     description="Create single.",
     *     operationId="store{{ Model }}",
     *     security={ {"bearerAuth": {} }},
     *      @OA\Parameter(
     *          name="name",
     *          description="Name",
     *          in="query",
     *          required=true,
     *          @OA\Schema(
     *              type="string",
     *              example=""
     *          )
     *      ),
     *     @OA\Parameter(
     *          name="is_active",
     *          description="Is active?",
     *          in="query",
     *          required=true,
     *          @OA\Schema(
     *              type="integer",
     *              example="1"
     *          )
     *      ),
     *     @OA\Response(
     *         response=200,
     *         description="successful operation",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=401,
     *         description="Unauthorized.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Forbidden.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=422,
     *         description="Unprocessable Content.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     )
     * )
     *
     * Store a newly created resource in storage.
     *
     * @param  {{ Request }} $request
     * @return Response
     */
    public function store({{ Request }} $request): Response
    {

        return $this->replySuccess(
            trans('messages.created'),
           $this->service->store($request->validated())->toArray()
        );
    }

    /**
     * @OA\Get(path="/api/{{ Route }}/{id}",
     *     tags={"{{ Tag }}"},
     *     summary="Get one item",
     *     description="Get single.",
     *     operationId="get{{ Model }}",
     *     security={ {"bearerAuth": {} }},
     *      @OA\Parameter(
     *          name="id",
     *          description="ID",
     *          in="path",
     *          required=true,
     *          @OA\Schema(
     *              type="string",
     *              example=""
     *          )
     *      ),
     *     @OA\Response(
     *         response=200,
     *         description="successful operation",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=401,
     *         description="Unauthorized.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Forbidden.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="Not found.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     )
     * )
     *
     * Display the specified resource.
     *
     * @param {{ Request }} $request
     * @param  int  $id
     * @return Response
     */
    public function show({{ Request }} $request, int $id): Response
    {
        return $this->replySuccess(
                trans('messages.model_found'),
                (new {{ Resource }}($this->service->getOne($id)))->toArray()
        );
    }

    /**
     * @OA\Put(path="/api/{{ Route }}/{id}",
     *     tags={"{{ Tag }}"},
     *     summary="Update",
     *     description="Update single.",
     *     operationId="update{{ Model }}",
     *     security={ {"bearerAuth": {} }},
     *     @OA\Parameter(
     *          name="id",
     *          description="ID",
     *          in="path",
     *          required=true,
     *          @OA\Schema(
     *              type="string",
     *              example=""
     *          )
     *      ),
     *     @OA\Response(
     *         response=200,
     *         description="successful operation",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=401,
     *         description="Unauthorized.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Forbidden.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=422,
     *         description="Unprocessable Content.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     )
     * )
     *
     * Update the specified resource in storage.
     *
     * @param  {{ Request }}  $request
     * @param  int  $id
     * @return Response
     */
    public function update({{ Request }} $request, int $id): Response
    {
        return $this->replySuccess(
            trans('messages.updated'),
            $this->service->update($id, $request->validated())->toArray()
        );
    }

    /**
     * @OA\Delete(path="/api/{{ Route }}/{id}",
     *     tags={"{{ Tag }}"},
     *     summary="Delete item",
     *     description="Delete single item",
     *     operationId="delete{{ Model }}",
     *     security={ {"bearerAuth": {} }},
     *      @OA\Parameter(
     *          name="id",
     *          description="ID",
     *          in="path",
     *          required=true,
     *          @OA\Schema(
     *              type="string",
     *              example=""
     *          )
     *      ),
     *     @OA\Response(
     *         response=200,
     *         description="successful operation",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=401,
     *         description="Unauthorized.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Forbidden.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="Not found.",
     *         @OA\Schema(
     *             additionalProperties={
     *                 "type": "integer",
     *                 "format": "int32"
     *             }
     *         )
     *     ),
     * )
     * Remove the specified resource from storage.
     *
     * @param {{ Request }} $request
     * @param  int  $id
     * @return Response
     */
    public function destroy({{ Request }} $request, int $id): Response
    {
        $this->service->delete($id);

        return $this->replySuccess(trans('messages.deleted'));
    }
}
